<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="gsserver_8cpp" kind="file" language="C++">
    <compoundname>gsserver.cpp</compoundname>
    <includes refid="gsserver_8h" local="yes">gsserver.h</includes>
    <includes refid="net_8h" local="yes">net.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="405">
        <label>QMap</label>
      </node>
      <node id="386">
        <label>QObject</label>
      </node>
      <node id="380">
        <label>ackpacket.h</label>
        <link refid="ackpacket_8h"/>
        <childnode refid="378" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
      </node>
      <node id="374">
        <label>QList</label>
      </node>
      <node id="379">
        <label>stdint.h</label>
      </node>
      <node id="385">
        <label>telemetrypacket.h</label>
        <link refid="telemetrypacket_8h"/>
        <childnode refid="382" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
      </node>
      <node id="371">
        <label>QThread</label>
      </node>
      <node id="370">
        <label>QPair</label>
      </node>
      <node id="409">
        <label>errno.h</label>
      </node>
      <node id="382">
        <label>string</label>
      </node>
      <node id="375">
        <label>QLinkedList</label>
      </node>
      <node id="394">
        <label>qcomboboxdelegate.h</label>
        <link refid="qcomboboxdelegate_8h"/>
        <childnode refid="395" relation="include">
        </childnode>
        <childnode refid="396" relation="include">
        </childnode>
        <childnode refid="397" relation="include">
        </childnode>
        <childnode refid="386" relation="include">
        </childnode>
        <childnode refid="398" relation="include">
        </childnode>
        <childnode refid="399" relation="include">
        </childnode>
        <childnode refid="400" relation="include">
        </childnode>
      </node>
      <node id="373">
        <label>serverqueue.h</label>
        <link refid="serverqueue_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="383" relation="include">
        </childnode>
        <childnode refid="385" relation="include">
        </childnode>
      </node>
      <node id="397">
        <label>QModelIndex</label>
      </node>
      <node id="387">
        <label>networklistener.h</label>
        <link refid="networklistener_8h"/>
        <childnode refid="386" relation="include">
        </childnode>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="388" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
        <childnode refid="389" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
      </node>
      <node id="403">
        <label>mission.h</label>
        <link refid="mission_8h"/>
        <childnode refid="388" relation="include">
        </childnode>
        <childnode refid="404" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
        <childnode refid="405" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="385" relation="include">
        </childnode>
        <childnode refid="406" relation="include">
        </childnode>
        <childnode refid="389" relation="include">
        </childnode>
      </node>
      <node id="384">
        <label>string.h</label>
      </node>
      <node id="393">
        <label>QTime</label>
      </node>
      <node id="392">
        <label>QApplication</label>
      </node>
      <node id="402">
        <label>QValidator</label>
      </node>
      <node id="368">
        <label>gsserver.h</label>
        <link refid="gsserver_8h"/>
        <childnode refid="369" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="386" relation="include">
        </childnode>
        <childnode refid="387" relation="include">
        </childnode>
        <childnode refid="389" relation="include">
        </childnode>
        <childnode refid="403" relation="include">
        </childnode>
      </node>
      <node id="391">
        <label>vector</label>
      </node>
      <node id="410">
        <label>signal.h</label>
      </node>
      <node id="399">
        <label>QLineEdit</label>
      </node>
      <node id="376">
        <label>packet.h</label>
        <link refid="packet_8h"/>
        <childnode refid="377" relation="include">
        </childnode>
        <childnode refid="378" relation="include">
        </childnode>
        <childnode refid="379" relation="include">
        </childnode>
      </node>
      <node id="388">
        <label>QString</label>
      </node>
      <node id="369">
        <label>QQueue</label>
      </node>
      <node id="372">
        <label>QUdpSocket</label>
      </node>
      <node id="408">
        <label>QHostAddress</label>
      </node>
      <node id="398">
        <label>QSize</label>
      </node>
      <node id="377">
        <label>time.h</label>
      </node>
      <node id="396">
        <label>QComboBox</label>
      </node>
      <node id="390">
        <label>iostream</label>
      </node>
      <node id="406">
        <label>flightpath.h</label>
        <link refid="flightpath_8h"/>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
        <childnode refid="388" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
      </node>
      <node id="395">
        <label>QItemDelegate</label>
      </node>
      <node id="407">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="408" relation="include">
        </childnode>
      </node>
      <node id="367">
        <label>C:/Users/Roman/Documents/Mygs/GroundStation/GS/gsserver.cpp</label>
        <link refid="gsserver.cpp"/>
        <childnode refid="368" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="409" relation="include">
        </childnode>
        <childnode refid="410" relation="include">
        </childnode>
        <childnode refid="390" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
      </node>
      <node id="401">
        <label>QDoubleValidator</label>
      </node>
      <node id="389">
        <label>messagebox.h</label>
        <link refid="messagebox_8h"/>
        <childnode refid="390" relation="include">
        </childnode>
        <childnode refid="391" relation="include">
        </childnode>
        <childnode refid="392" relation="include">
        </childnode>
        <childnode refid="370" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="393" relation="include">
        </childnode>
        <childnode refid="379" relation="include">
        </childnode>
        <childnode refid="394" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="383" relation="include">
        </childnode>
        <childnode refid="385" relation="include">
        </childnode>
      </node>
      <node id="400">
        <label>mapvalidator.h</label>
        <link refid="mapvalidator_8h"/>
        <childnode refid="401" relation="include">
        </childnode>
        <childnode refid="402" relation="include">
        </childnode>
      </node>
      <node id="383">
        <label>infopacket.h</label>
        <link refid="infopacket_8h"/>
        <childnode refid="382" relation="include">
        </childnode>
        <childnode refid="384" relation="include">
        </childnode>
        <childnode refid="379" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
      </node>
      <node id="378">
        <label>stdio.h</label>
      </node>
      <node id="381">
        <label>actionpacket.h</label>
        <link refid="actionpacket_8h"/>
        <childnode refid="382" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
      </node>
      <node id="404">
        <label>QVector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gsserver_8h" kindref="compound">gsserver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="net_8h" kindref="compound">net.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><ref refid="class_gs_server_1a0931c5e470fcb46548c14996d2d9c853" kindref="member">GsServer::GsServer</ref>(<ref refid="classmessagebox" kindref="compound">messagebox</ref><sp/>*myMessageBox,<sp/><ref refid="class_mission" kindref="compound">Mission</ref><sp/>*myMission):</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>networkListener(myMessageBox,this){</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;myMessageBox<sp/>=<sp/>myMessageBox;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;myMission<sp/>=<sp/>myMission;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>port<sp/>=<sp/><ref refid="namespace_n_e_t_1a436caa39d4051e512ca92a29a3aecb73" kindref="member">NET::SEND_PORT</ref>;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>target<sp/>=<sp/><ref refid="namespace_n_e_t_1a1afde57c61ec70002a412fb1ecbc8c97" kindref="member">NET::TARGET_ADDR</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>connect(&amp;networkListener,<sp/>&amp;<ref refid="class_network_listener_1aa695d0b565bb61dea1d03715b9f22e4b" kindref="member">NetworkListener::packetRecieved</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;<ref refid="class_gs_server_1a5affc1d47f645639011c2dbf59e6bbb0" kindref="member">GsServer::recivePacket</ref>);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="class_gs_server_1a56461ff8c405720a8cb591c84f61a5bf" kindref="member">GsServer::~GsServer</ref>(){</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1a7ca468b85231e88da9b5cafb1320bbb4" kindref="member">closeServer</ref>();</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gs_server_1a6f73b66c39e5080eb58c80ab355d3c8c" kindref="member">GsServer::openServer</ref>(){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1a720185d9a2050ae2d5ebda4e7262ba6e" kindref="member">running</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gs_server_1a6f73b66c39e5080eb58c80ab355d3c8c" kindref="member">GsServer::openServer</ref>(QHostAddress<sp/>target,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;target<sp/>=<sp/><ref refid="class_gs_server_1a91027c1924f957f5d18a914f7df17abf" kindref="member">target</ref>;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;port<sp/>=<sp/><ref refid="class_gs_server_1a4c1028d1b802470b7fca29b16882e5ad" kindref="member">port</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1a6f73b66c39e5080eb58c80ab355d3c8c" kindref="member">openServer</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gs_server_1a394e75ea0a17eb9a6ac2814ea84b250c" kindref="member">GsServer::startServer</ref>(){</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Server<sp/>starting...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_gs_server_1a720185d9a2050ae2d5ebda4e7262ba6e" kindref="member">running</ref><sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Need<sp/>to<sp/>open<sp/>server<sp/>before<sp/>it<sp/>can<sp/>start&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;start();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1aa115a3c8f593c29bc6d68f102dbf1941" kindref="member">networkListener</ref>.<ref refid="class_network_listener_1aae655a7afbd74bbe193612f2b7638958" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gs_server_1a7ca468b85231e88da9b5cafb1320bbb4" kindref="member">GsServer::closeServer</ref>(){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1aa115a3c8f593c29bc6d68f102dbf1941" kindref="member">networkListener</ref>.<ref refid="class_network_listener_1a258e0ef8e6e4de827e652a43186c6a07" kindref="member">stop</ref>();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1a720185d9a2050ae2d5ebda4e7262ba6e" kindref="member">running</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gs_server_1abfbbae94e647cc6415b3a460fbabec88" kindref="member">GsServer::recieveAckPacket</ref>(<ref refid="class_protocol_1_1_ack_packet" kindref="compound">Protocol::AckPacket</ref>*<sp/><ref refid="_packet_8cpp_1a872b58fc3c67b0ef7aa2262956219640" kindref="member">ack</ref>){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1a84a20d665e47ffca7edff0f1fe97dc5f" kindref="member">outPackets</ref>.<ref refid="class_server_queue_1a4815b1a73a46c6b581bd70a82b04d1b0" kindref="member">recieveAckPacket</ref>(ack);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gs_server_1aa906d6a7084c03849eadcd31563057e6" kindref="member">GsServer::run</ref>(){</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1a720185d9a2050ae2d5ebda4e7262ba6e" kindref="member">running</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_protocol_1_1_action_packet" kindref="compound">Protocol::ActionPacket</ref><sp/>setHome;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>setHome.<ref refid="class_protocol_1_1_action_packet_1ac59aeacf4f0566ce327bdbacd8594687" kindref="member">SetAction</ref>(<ref refid="namespace_protocol_1a95f2e35dc2d8d920f0d7ddaaf122c3b9ad127d07d13bd85cec9997691b4eec0d4" kindref="member">Protocol::ActionType::SetHome</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_protocol_1_1_action_packet" kindref="compound">Protocol::ActionPacket</ref><sp/>start;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>start.<ref refid="class_protocol_1_1_action_packet_1ac59aeacf4f0566ce327bdbacd8594687" kindref="member">SetAction</ref>(<ref refid="namespace_protocol_1a95f2e35dc2d8d920f0d7ddaaf122c3b9aa6122a65eaa676f700ae68d393054a37" kindref="member">Protocol::ActionType::Start</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1ae8e04868caa920485facfc4cfda6291e" kindref="member">sendPacket</ref>(&amp;setHome,0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>priority<sp/>of<sp/>this<sp/>packet<sp/>needs<sp/>to<sp/>be<sp/>100<sp/>if<sp/>you<sp/>want<sp/>to<sp/>work<sp/>with<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sendPacket(&amp;start,<sp/>100);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1ae8e04868caa920485facfc4cfda6291e" kindref="member">sendPacket</ref>(&amp;start,1);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="class_gs_server_1a720185d9a2050ae2d5ebda4e7262ba6e" kindref="member">running</ref>){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_gs_server_1a84a20d665e47ffca7edff0f1fe97dc5f" kindref="member">outPackets</ref>.<ref refid="class_server_queue_1aa8335eeeaf56fbe703cb49988b63fb87" kindref="member">isEmpty</ref>()){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1a9fbceada3decdaafff7c1d5dda8c8405" kindref="member">sendNextPacket</ref>();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QThread::msleep(100);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>QThread::msleep(2000);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gs_server_1ae8e04868caa920485facfc4cfda6291e" kindref="member">GsServer::sendPacket</ref>(<ref refid="class_protocol_1_1_packet" kindref="compound">Protocol::Packet</ref>*<sp/>packet){</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1ae8e04868caa920485facfc4cfda6291e" kindref="member">sendPacket</ref>(packet,<ref refid="serverqueue_8cpp_1a95db6a7d53281adcef1ffbcf2a0c32f2" kindref="member">DEFAULT_PRIORITY</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gs_server_1ae8e04868caa920485facfc4cfda6291e" kindref="member">GsServer::sendPacket</ref>(<ref refid="class_protocol_1_1_packet" kindref="compound">Protocol::Packet</ref>*<sp/>packet,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>priority){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1a84a20d665e47ffca7edff0f1fe97dc5f" kindref="member">outPackets</ref>.<ref refid="class_server_queue_1a715921b0a0067b3d3a1485a824fbbb3d" kindref="member">enqueue</ref>(packet,priority);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gs_server_1aaa42f9bb1c822408a6c030ca880f5a91" kindref="member">GsServer::addPacketToMission</ref>(<ref refid="class_protocol_1_1_telemetry_packet" kindref="compound">Protocol::TelemetryPacket</ref><sp/>packet){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1a3ac60e8ec661841743faae8c0c9e8102" kindref="member">myMission</ref>-&gt;<ref refid="class_mission_1aba7aac52c4313705452dabcce0a6a0d2" kindref="member">addPacket</ref>(packet);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gs_server_1a9fbceada3decdaafff7c1d5dda8c8405" kindref="member">GsServer::sendNextPacket</ref>()<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;sending<sp/>message!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_protocol_1_1_packet" kindref="compound">Protocol::Packet</ref>*<sp/>packet<sp/>=<sp/><ref refid="class_gs_server_1a84a20d665e47ffca7edff0f1fe97dc5f" kindref="member">outPackets</ref>.<ref refid="class_server_queue_1a89278291c92e8ec01d730407d3f2f806" kindref="member">getNextPacket</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(packet<sp/>==<sp/>NULL){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;No<sp/>packets<sp/>left<sp/>to<sp/>send!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TEST<sp/>retrieving<sp/>data<sp/>from<sp/>the<sp/>mission<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/>QVector&lt;double&gt;<sp/>*startValues<sp/>=<sp/>myMission-&gt;getValuesForID(1);</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;Start<sp/>Values:<sp/>&quot;;</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/>for(double<sp/>entry:<sp/>*startValues){</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;entry<sp/>&lt;&lt;<sp/>&quot;,&quot;;</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//end<sp/>retrieval<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>QByteArray<sp/>datagram;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>QDataStream<sp/>out(&amp;datagram,<sp/>QIODevice::WriteOnly);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>out.setVersion(QDataStream::Qt_4_3);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>storage<sp/>for<sp/>the<sp/>packet<sp/>in<sp/>the<sp/>for<sp/>of<sp/>u_int8_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>storage[<ref refid="namespace_n_e_t_1a51a2332141527f7e79ffd71728f139dd" kindref="member">NET::PACKET_LENGTH</ref>];</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>the<sp/>packet<sp/>into<sp/>bytes<sp/>and<sp/>store<sp/>into<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>packet_size<sp/>=<sp/>packet-&gt;<ref refid="class_protocol_1_1_packet_1a9c89c3d05acc44a5050ebfc756a2cd41" kindref="member">GetBytes</ref>(storage,<sp/><ref refid="namespace_n_e_t_1a51a2332141527f7e79ffd71728f139dd" kindref="member">NET::PACKET_LENGTH</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>bytes<sp/>inside<sp/>storage<sp/>to<sp/>out<sp/>datastream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=0;<sp/>i<sp/>&lt;<sp/>packet_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>storage[i];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>datagram<sp/>through<sp/>UDP<sp/>socket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_gs_server_1a7332175035126c6da81ba9f10cae95e2" kindref="member">outSocket</ref>.writeDatagram(datagram,<sp/><ref refid="class_gs_server_1a91027c1924f957f5d18a914f7df17abf" kindref="member">target</ref>,<sp/><ref refid="namespace_n_e_t_1a436caa39d4051e512ca92a29a3aecb73" kindref="member">NET::SEND_PORT</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TEST<sp/>CODE<sp/>TO<sp/>SIMULATE<sp/>INCOMING<sp/>ACK<sp/>PACKETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//COMMENT<sp/>OUT<sp/>TO<sp/>USE<sp/>ACTUAL<sp/>ACK<sp/>PACKETS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Protocol::AckPacket<sp/>*ack<sp/>=<sp/>new<sp/>Protocol::AckPacket;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ack-&gt;set_timestamp(packet-&gt;get_timestamp());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//outPackets.recieveAckPacket(ack);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//END<sp/>TEST<sp/>CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_gs_server_1a5affc1d47f645639011c2dbf59e6bbb0" kindref="member">GsServer::recivePacket</ref>(<ref refid="class_protocol_1_1_packet" kindref="compound">Protocol::Packet</ref><sp/>*packet)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>emit<sp/><ref refid="class_gs_server_1aaf16a132e06135f8d992a5e7a29bef27" kindref="member">packetRecieved</ref>(packet);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Roman/Documents/Mygs/GroundStation/GS/gsserver.cpp"/>
  </compounddef>
</doxygen>
